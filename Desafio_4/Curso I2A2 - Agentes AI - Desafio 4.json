{
  "name": "Curso I2A2 - Agentes AI - Desafio 4",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "e2f2a397-c388-42a4-bdf8-b5841d8b6975",
        "options": {
          "binaryPropertyName": "file"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -816,
        -944
      ],
      "id": "b618cce3-b621-4bc7-9bcc-631fb4817305",
      "name": "Webhook",
      "webhookId": "e2f2a397-c388-42a4-bdf8-b5841d8b6975"
    },
    {
      "parameters": {
        "binaryPropertyName": "file0"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -592,
        -944
      ],
      "id": "12a7158f-f8cf-437d-8f30-3e5d5bae7d30",
      "name": "Compression1"
    },
    {
      "parameters": {
        "tableId": "Admissao",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json.MATRICULA }}"
            },
            {
              "fieldId": "cargo",
              "fieldValue": "={{ $json.Cargo }}"
            },
            {
              "fieldId": "data_admissao",
              "fieldValue": "={{ DateTime.fromMillis((($json['Admissão'] - 25568) * 86400 * 1000)).toFormat('yyyy-MM-dd') }}"
            },
            {
              "fieldId": "ativo",
              "fieldValue": "={{ $json.__EMPTY !== 'demitido' }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        -1616
      ],
      "id": "ddb5a875-d445-49aa-a496-66b41dcfcb06",
      "name": "Insert Admissao",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "Afastamentos",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json.MATRICULA }}"
            },
            {
              "fieldId": "situacao",
              "fieldValue": "={{ $json['DESC. SITUACAO'] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        -1424
      ],
      "id": "77102c02-33a3-4c53-9e6e-0202122ece6a",
      "name": "Insert Afastamentos",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "Aprendiz",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json.MATRICULA }}"
            },
            {
              "fieldId": "cargo",
              "fieldValue": "={{ $json['TITULO DO CARGO'] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        -1248
      ],
      "id": "65bc18cc-58b5-4f25-855b-b2402808a4b8",
      "name": "Insert Aprendiz",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "Ativos",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json.MATRICULA }}"
            },
            {
              "fieldId": "empresa",
              "fieldValue": "={{ $json.EMPRESA }}"
            },
            {
              "fieldId": "cargo",
              "fieldValue": "={{ $json['TITULO DO CARGO'] }}"
            },
            {
              "fieldId": "situacao",
              "fieldValue": "={{ $json['DESC. SITUACAO'] }}"
            },
            {
              "fieldId": "sindicato",
              "fieldValue": "={{ $json.Sindicato.startsWith(\"SINDPD SP\") ? 'SP': $json.Sindicato.startsWith(\"SINDPPD RS\") ? 'RS':\n$json.Sindicato.startsWith(\"SINDPD RJ\") ? 'RJ' : 'PR'}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        -1056
      ],
      "id": "ddc73b2d-c230-4e87-a7d1-c6fdabb63b4a",
      "name": "Insert Ativos",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "Desligados",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json['MATRICULA '] }}"
            },
            {
              "fieldId": "data_demissao",
              "fieldValue": "={{ DateTime.fromMillis((($json['DATA DEMISSÃO'] - 25568) * 86400 * 1000)).toFormat('yyyy-MM-dd') }}"
            },
            {
              "fieldId": "comunicado",
              "fieldValue": "={{ $json['COMUNICADO DE DESLIGAMENTO'] == 'OK' }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        -864
      ],
      "id": "aab892a9-5bef-4dc9-a1c6-c9f2b09fcef2",
      "name": "Insert Desligados",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combineBySql",
        "numberInputs": 9,
        "query": "select input4.matricula\n  , input4.empresa\n  , COALESCE(input1.data_admissao, '{{ $now.minus(6, 'months').format('yyyy-LL-dd') }}') as data_admissao\n  , input4.cargo\n  , input4.situacao\n  , input9.sindicato\n  , input9.sindicato_uf\n  , input9.valor_vr_dia\n  , input9.dias_uteis\n  , '{{ $('Webhook').item.json.body.Competencia }}' as competencia\nfrom input4 \nleft join input1 on input4.matricula = input1.matricula\nleft join input5 on input4.matricula = input5.matricula\ninner join input9 on input4.sindicato = input9.sindicato_uf",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1152,
        -976
      ],
      "id": "97f3c6de-0298-45dc-b21f-b6e89a083a72",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_7",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        -688
      ],
      "id": "98765542-9437-45d1-bf66-9593ded25a8f",
      "name": "Planilha Estagio"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_6",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        -864
      ],
      "id": "aa100c23-d7cf-4fb3-b658-226a8d055e25",
      "name": "Planilha Desligados"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_3",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        -1056
      ],
      "id": "8358c6ca-cb11-4762-9140-45f13e7bb92e",
      "name": "Planilha Ativos"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_2",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        -1248
      ],
      "id": "b2141dc7-2cb1-4c6a-ad9b-0729e9657d08",
      "name": "Planilha Aprendiz"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_1",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        -1424
      ],
      "id": "7297bf2a-6a5f-41a2-a7bf-b1c808a2046b",
      "name": "Planilha Afastamentos"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        -1616
      ],
      "id": "d47d8f9f-bbb7-4eaf-abac-a15c34d6657d",
      "name": "Planilha Admissao",
      "executeOnce": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "tableId": "Estagiario",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json.MATRICULA }}"
            },
            {
              "fieldId": "cargo",
              "fieldValue": "={{ $json['TITULO DO CARGO'] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        -688
      ],
      "id": "c24564dd-f64f-452a-9e63-d4fde38cf825",
      "name": "Insert Estagio",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_8",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        -496
      ],
      "id": "d2f756ce-dfca-4c7d-af6c-69e5d1be3d9d",
      "name": "Planilha Exterior"
    },
    {
      "parameters": {
        "tableId": "Exterior",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json.Cadastro }}"
            },
            {
              "fieldId": "valor",
              "fieldValue": "={{ $json.Valor }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        -496
      ],
      "id": "cfbcaad7-b541-465e-92a6-ad3c88f4df80",
      "name": "Insert Exterior",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_9",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        208,
        -320
      ],
      "id": "c8846daa-792d-45d4-848f-89b165905bb5",
      "name": "Planilha Ferias"
    },
    {
      "parameters": {
        "tableId": "Ferias",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json.MATRICULA }}"
            },
            {
              "fieldId": "situacao",
              "fieldValue": "={{ $json['DESC. SITUACAO'] }}"
            },
            {
              "fieldId": "dias",
              "fieldValue": "={{ $json['DIAS DE FÉRIAS'] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        -320
      ],
      "id": "635b4495-11a7-4248-920c-77f4c17cf9ca",
      "name": "Insert Ferias",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_4",
        "options": {
          "headerRow": false
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        208,
        -128
      ],
      "id": "929b4f61-3ca9-4ee0-9b1e-2472fdd88312",
      "name": "Planilha Base dias uteis",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file_5",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        208,
        64
      ],
      "id": "0873dfb6-0eb2-40d1-ac06-d12c8a0a8630",
      "name": "Planilha Base valor sindicato"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "SINDICATO_UF",
              "field2": "ESTADO                                                     "
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        704,
        0
      ],
      "id": "9387e918-7aec-4d5a-b936-1f464335f8ee",
      "name": "Merge1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const result = [];\n\nfor (const item of $input.all()) {\n  if (item.json.row.length > 0 && (!item.json.row[0].startsWith(\"BASE\") && !item.json.row[0].startsWith(\"SINDICA\"))) {\n    const sindi = item.json.row[0].startsWith(\"SINDPPD RS\") ? \"Rio Grande do Sul\" : item.json.row[0].startsWith(\"SINDPD SP\") ? \"São Paulo\" : item.json.row[0].startsWith(\"SINDPD RJ\") ? \"Rio de Janeiro\" : \"Paraná\";\n    result.push({SINDICATO: item.json.row[0], SINDICATO_UF: sindi, DIAS_UTEIS: item.json.row[1]});\n  }\n}\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        -128
      ],
      "id": "c0f0b25d-ee3e-4ab3-92bd-f2badec12063",
      "name": "Code1"
    },
    {
      "parameters": {
        "tableId": "Sindicato",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "sindicato",
              "fieldValue": "={{ $json.SINDICATO }}"
            },
            {
              "fieldId": "dias_uteis",
              "fieldValue": "={{ $json.DIAS_UTEIS }}"
            },
            {
              "fieldId": "valor_vr_dia",
              "fieldValue": "={{ $json.VALOR }}"
            },
            {
              "fieldId": "sindicato_uf",
              "fieldValue": "={{ $json.SINDICATO_UF == \"São Paulo\" ? \"SP\" : $json.SINDICATO_UF == \"Rio Grande do Sul\" ? \"RS\" : $json.SINDICATO_UF == \"Rio de Janeiro\" ? \"RJ\" : \"PR\" }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        912,
        0
      ],
      "id": "c0dbbda7-b965-474c-84c2-0ab01553877e",
      "name": "Insert Dados Sindicato",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "Dados",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "data_admissao",
              "fieldValue": "={{ $json.data_admissao ?? null }}"
            },
            {
              "fieldId": "matricula",
              "fieldValue": "={{ $json.matricula }}"
            },
            {
              "fieldId": "empresa",
              "fieldValue": "={{ $json.empresa }}"
            },
            {
              "fieldId": "cargo",
              "fieldValue": "={{ $json.cargo }}"
            },
            {
              "fieldId": "situacao",
              "fieldValue": "={{ $json.situacao }}"
            },
            {
              "fieldId": "sindicato",
              "fieldValue": "={{ $json.sindicato }}"
            },
            {
              "fieldId": "sindicato_uf",
              "fieldValue": "={{ $json.sindicato_uf }}"
            },
            {
              "fieldId": "valor_vr_dia",
              "fieldValue": "={{ $json.valor_vr_dia }}"
            },
            {
              "fieldId": "dias_uteis",
              "fieldValue": "={{ $json.dias_uteis }}"
            },
            {
              "fieldId": "competencia",
              "fieldValue": "={{ $json.competencia }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1424,
        -864
      ],
      "id": "e457d33f-9ac2-44a1-95de-d59fa3116ee0",
      "name": "Create a row",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Input e sanitização",
        "height": 2048,
        "width": 2976
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -912,
        -1696
      ],
      "typeVersion": 1,
      "id": "7a6ce5d2-c655-4fad-bdb2-176ef3be5a0d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Agente AI",
        "height": 1248,
        "width": 2448,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2128,
        -1328
      ],
      "typeVersion": 1,
      "id": "0e1adfca-9ad1-4808-bacd-438c72d988f4",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Processe este lote:\n\nLote: {{ $json.lote_numero }} de {{ $json.total_lotes }}\nCompetência: {{ $json.competencia }}\nRegistros: {{ $json.registros.length }}\n\nDados:\n{{ JSON.stringify($json.registros, null, 2) }}\n\nIMPORTANTE: Retorne JSON válido com TODOS os {{ $json.registros.length }} registros processados.",
        "options": {
          "systemMessage": "Você é um especialista em cálculo de VR/VA. Processe TODOS os registros do lote recebido.\n\nREGRAS:\n1. Período: 16 do mês anterior a 15 do mês competência\n2. Feriados 2025: 01/01, 21/04, 01/05, 07/09, 12/10, 02/11, 15/11, 25/12\n3. Data admissão null: usar hoje - 6 meses + observação\n4. Cálculo: (dias_uteis - feriados_no_periodo) × valor_vr_dia\n5. Empresa paga 80%, colaborador 20%\n\nFORMATO DE SAÍDA - JSON OBRIGATÓRIO:\n{\n  \"lote\": number,\n  \"processados\": number,\n  \"dados\": [\n    {\n      \"Matricula\": \"string\",\n      \"Data_admissao\": \"DD/MM/YYYY\",\n      \"Sindicato\": \"string\",\n      \"Competencia\": \"MM.YYYY\",\n      \"Dias_uteis\": number,\n      \"Valor_diario_VR\": number,\n      \"Total\": number,\n      \"Custo_empresa\": number,\n      \"Desconto_colaborador\": number,\n      \"Observacao\": \"string\"\n    }\n  ],\n  \"status\": \"sucesso\"\n}\n\nProcesse AGORA todos os registros do lote e retorne JSON válido."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3008,
        -880
      ],
      "id": "677d6628-46f5-4ba7-be2b-3fc4bf9f48dc",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-pro",
        "options": {
          "temperature": 0.1,
          "topP": 0.8
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3008,
        -640
      ],
      "id": "19aa5c72-5a37-44c1-a0ed-45d5e9c196d2",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "5nBabh41sCIYmwHC",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Dados",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2496,
        -880
      ],
      "id": "0b92e0b4-fc4e-4d45-8b3d-9669bc56f40f",
      "name": "Get many rows1",
      "credentials": {
        "supabaseApi": {
          "id": "EdsgIxto4MB9Y2FM",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2048,
        -864
      ],
      "id": "6f587b5b-38d1-4345-bc39-e5a07738e5d0",
      "name": "Wait",
      "webhookId": "241ccd7c-7ae5-4651-bacb-b202a9a8280c"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const response = $input.item.json;\nlet dadosProcessados;\n\ntry {\n  console.log('### ==> ', response)\n  // Tentar parsear a resposta da AI\n  if (typeof response.choices?.[0]?.message?.content === 'string') {\n    dadosProcessados = JSON.parse(response.choices[0].message.content);\n  } else if (typeof response.output === 'string') {\n    const jsonSplit = response.output.split('```json')\n    console.log('### ==> ', jsonSplit)\n    dadosProcessados = JSON.parse(jsonSplit[jsonSplit.length-1].replace('```', ''));\n  } else if (typeof response === 'object' && response.dados) {\n    dadosProcessados = response;\n  } else {\n    throw new Error('Formato de resposta inválido');\n  }\n  \n  // Validar estrutura\n  if (!dadosProcessados.dados || !Array.isArray(dadosProcessados.dados)) {\n    throw new Error('Dados não encontrados ou formato inválido');\n  }\n  \n  console.log(`Lote ${dadosProcessados.lote}: ${dadosProcessados.dados.length} registros processados`);\n  \n  return {\n    json: {\n      ...dadosProcessados,\n      status_processamento: 'sucesso',\n      timestamp: new Date().toISOString()\n    }\n  };\n  \n} catch (error) {\n  console.log(`Erro no lote: ${error.message}`);\n  \n  return [{\n    json: {\n      lote: $('Split em Lotes').item.json.lote_numero || 0,\n      dados: [],\n      processados: 0,\n      status_processamento: 'erro',\n      erro: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3360,
        -880
      ],
      "id": "468788e8-ee1a-465c-9c4a-b307eb969c2e",
      "name": "Validar Resposta AI",
      "retryOnFail": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Configurações\nconst BATCH_SIZE = 200; // Ajuste conforme necessário \nconst competencia = $input.first().json.competencia || '05.2025';\n\n// Pegar dados do Supabase\nconst dados = $input.all();\nconsole.log(`Total de registros recebidos: ${dados.length}`);\n\n// Dividir em lotes\nconst lotes = [];\nfor (let i = 0; i < dados.length; i += BATCH_SIZE) {\n  const lote = {\n    lote_numero: Math.floor(i / BATCH_SIZE) + 1,\n    total_lotes: Math.ceil(dados.length / BATCH_SIZE),\n    registros: dados.slice(i, i + BATCH_SIZE),\n    competencia: competencia,\n    total_registros_originais: dados.length\n  };\n  \n  lotes.push(lote);\n  console.log(`Lote ${lote.lote_numero} criado com ${lote.registros.length} registros`);\n}\n\n// Retornar cada lote como item separado\nreturn lotes.map(lote => ({\n  json: lote\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2752,
        -880
      ],
      "id": "41f9891b-d160-4777-9b80-5d8bd9b4d437",
      "name": "Split em Lotes",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// Coletar TODOS os lotes processados (agora funcionará corretamente)\nconst todosLotes = $input.all();\nconsole.log(`📊 Iniciando merge de ${todosLotes.length} lotes`);\n\nlet dadosFinais = [];\nlet totalProcessados = 0;\nlet totalComErro = 0;\nlet lotesDetalhados = [];\n\n// Consolidar dados de todos os lotes\nfor (let i = 0; i < todosLotes.length; i++) {\n  const loteItem = todosLotes[i];\n  const loteData = loteItem.json;\n  \n  console.log(`📦 Processando lote ${i + 1}: Status = ${loteData.status_processamento}`);\n  \n  // Salvar detalhes do lote para debug\n  lotesDetalhados.push({\n    lote_numero: loteData.lote || (i + 1),\n    status: loteData.status_processamento,\n    registros_processados: loteData.dados?.length || 0,\n    erro: loteData.erro || null\n  });\n  \n  if (loteData.status_processamento === 'sucesso' && loteData.dados && Array.isArray(loteData.dados)) {\n    loteData.dados.map(item => {\n      dadosFinais.push({\n          'Matricula': item.Matricula || '',\n          'Admissao': item.Data_admissao || '',\n          'Sindicato': item.Sindicato || '',\n          'Competencia': item.Competencia || '',\n          'Dias': item.Dias_uteis || '22',\n          'ValorDiarioVR': item.Valor_diario_VR || 0.0,\n          'Total': item.Total || 0.0,\n          'CustoEmpresa': item.Custo_empresa || 0.0,\n          'DescontoProfissional': item.Desconto_colaborador || 0.0,\n          'ObservacaoGeral': item.Observacao\n      })\n    })\n    // dadosFinais = dadosFinais.concat(loteData.dados);\n    totalProcessados += loteData.processados || loteData.dados.length;\n    console.log(`✅ Lote ${loteData.lote}: ${loteData.dados.length} registros adicionados`);\n  } else {\n    totalComErro++;\n    console.error(`❌ Lote ${loteData.lote} com erro: ${loteData.erro}`);\n  }\n}\n\n// Calcular resumos financeiros\nconst valorTotal = dadosFinais.reduce((sum, item) => sum + (parseFloat(item.Total) || 0), 0);\nconst custoEmpresa = dadosFinais.reduce((sum, item) => sum + (parseFloat(item.Custo_empresa) || 0), 0);\nconst descontoColaborador = dadosFinais.reduce((sum, item) => sum + (parseFloat(item.Desconto_colaborador) || 0), 0);\n\n// Resultado final consolidado\nconst resultado = {\n  dados: dadosFinais,\n  resumo: {\n    total_colaboradores: dadosFinais.length,\n    total_processados: totalProcessados,\n    total_lotes: todosLotes.length,\n    lotes_sucesso: todosLotes.length - totalComErro,\n    lotes_com_erro: totalComErro,\n    valor_total_geral: parseFloat(valorTotal.toFixed(2)),\n    custo_total_empresa: parseFloat(custoEmpresa.toFixed(2)),\n    desconto_total_colaborador: parseFloat(descontoColaborador.toFixed(2))\n  },\n  metadata: {\n    competencia: todosLotes[0]?.json?.competencia || '',\n    processamento_completo: totalComErro === 0,\n    timestamp: new Date().toISOString(),\n    lotes_detalhados: lotesDetalhados\n  }\n};\n\nconsole.log(`🎉 Processamento concluído: ${dadosFinais.length} registros finais de ${todosLotes.length} lotes`);\nconsole.log(`💰 Valor total: R$ ${valorTotal.toFixed(2)}`);\n\nreturn [{ json: resultado }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3616,
        -880
      ],
      "id": "2936b5ec-228a-4a72-aadf-e33edbecdeac",
      "name": "Merge Resultados"
    },
    {
      "parameters": {
        "jsCode": "// =============================================================================\n// CODE NODE: GERAR XLSX MANUAL - IMPLEMENTAÇÃO FINAL\n// =============================================================================\n\n// Pegar dados consolidados do merge anterior\nconst resultado = $input.first().json;\nconst dados = resultado.dados;\n\nconsole.log(`📊 Iniciando geração XLSX com ${dados.length} registros`);\nconsole.log(`📊 Competência: ${resultado.metadata.competencia}`);\n\n// Validar se temos dados\nif (!dados || !Array.isArray(dados) || dados.length === 0) {\n    console.error('❌ Nenhum dado encontrado para gerar planilha');\n    return [{\n        json: {\n            error: true,\n            message: 'Nenhum dado encontrado para gerar planilha',\n            recordCount: 0\n        }\n    }];\n}\n\n// =============================================================================\n// PREPARAR DADOS PARA CSV/XLSX\n// =============================================================================\n\nlet csvContent = '';\n\n// Headers da planilha\nconst headers = [\n    'Matrícula',\n    'Admissão', \n    'Sindicato do Colaborador',\n    'Competência',\n    'Dias',\n    'Valor Diário VR',\n    'Total',\n    'Custo Empresa',\n    'Desconto Profissional',\n    'Observação Geral'\n];\n\n// Adicionar headers ao CSV\ncsvContent += headers.join(',') + '\\n';\n\n// Processar cada linha de dados\nlet linhasProcessadas = 0;\ndados.forEach((item, index) => {\n    try {\n        // Extrair dados com fallback para diferentes formatos de campo\n        const matricula = item.Matricula || item.matricula || '';\n        const dataAdmissao = item.Admissao || item[\"Data admissao\"] || item.data_admissao || '';\n        const sindicato = item.Sindicato || item[\"Sindicato do colaborador\"] || item.sindicato || '';\n        const competencia = item.Competencia || item[\"Competência\"] || item.competencia || resultado.metadata.competencia || '';\n        const diasUteis = item.Dias || item[\"Dias úteis\"] || item.dias_uteis || 0;\n        const valorDiario = parseFloat(item.ValorDiarioVR || item[\"Valor diário VR\"] || item.valor_vr_dia || 0).toFixed(2);\n        const total = parseFloat(item.Total || item.total || 0).toFixed(2);\n        const custoEmpresa = parseFloat(item.CustoEmpresa || item[\"Custo empresa\"] || item.custo_empresa || 0).toFixed(2);\n        const descontoColaborador = parseFloat(item.DescontoProfissional || item[\"Desconto colaborador\"] || item.desconto_colaborador || 0).toFixed(2);\n        const observacao = item.ObservacaoGeral || item[\"Observacao geral\"] || item.Observacao_geral || item.observacao || '';\n\n        // Criar linha CSV (escapando aspas duplas)\n        const row = [\n            `\"${String(matricula).replace(/\"/g, '\"\"')}\"`,\n            `\"${String(dataAdmissao).replace(/\"/g, '\"\"')}\"`,\n            `\"${String(sindicato).replace(/\"/g, '\"\"')}\"`,\n            `\"${String(competencia).replace(/\"/g, '\"\"')}\"`,\n            `\"${diasUteis}\"`,\n            `\"${valorDiario}\"`,\n            `\"${total}\"`,\n            `\"${custoEmpresa}\"`,\n            `\"${descontoColaborador}\"`,\n            `\"${String(observacao).replace(/\"/g, '\"\"')}\"`\n        ];\n\n        csvContent += row.join(',') + '\\n';\n        linhasProcessadas++;\n\n    } catch (error) {\n        console.error(`❌ Erro ao processar linha ${index + 1}:`, error.message);\n        console.error(`❌ Dados da linha:`, JSON.stringify(item, null, 2));\n    }\n});\n\n// =============================================================================\n// ADICIONAR LINHA DE TOTAIS\n// =============================================================================\n\nconst resumo = resultado.resumo || {};\nconst rowTotais = [\n    '\"TOTAIS\"',\n    '\"\"', // Data Admissão vazia\n    '\"\"', // Sindicato vazio\n    `\"${resultado.metadata.competencia || ''}\"`,\n    '\"\"', // Dias Úteis vazio\n    '\"\"', // Valor Diário vazio\n    `\"${parseFloat(resumo.valor_total_geral || 0).toFixed(2)}\"`,\n    `\"${parseFloat(resumo.custo_total_empresa || 0).toFixed(2)}\"`,\n    `\"${parseFloat(resumo.desconto_total_colaborador || 0).toFixed(2)}\"`,\n    `\"Total: ${resumo.total_colaboradores || linhasProcessadas} colaboradores\"`\n];\n\ncsvContent += rowTotais.join(',') + '\\n';\n\n// =============================================================================\n// GERAR ARQUIVO\n// =============================================================================\n\n// Nome do arquivo com timestamp\nconst competencia = resultado.dados[0].Competencia || 'XX_XXXX';\nconst timestamp = new Date().toISOString()\n    .slice(0, 16)\n    .replace(/[:T-]/g, '_');\nconst fileName = `VR Mensal ${competencia}.xlsx`;\n\n// Criar buffer com BOM para UTF-8 (garante acentos corretos no Excel)\nconst csvWithBom = '\\ufeff' + csvContent;\nconst buffer = Buffer.from(csvWithBom, 'utf8');\n\n// Estatísticas finais\nconst fileStats = {\n    totalLinhas: linhasProcessadas + 1, // +1 pela linha de totais\n    tamanhoArquivo: buffer.length,\n    competencia: competencia,\n    valorTotal: resumo.valor_total_geral || 0\n};\n\nconsole.log(`✅ Arquivo gerado com sucesso:`);\nconsole.log(`   📄 Nome: ${fileName}`);\nconsole.log(`   📊 Registros: ${linhasProcessadas}`);\nconsole.log(`   💰 Valor Total: R$ ${parseFloat(resumo.valor_total_geral || 0).toFixed(2)}`);\nconsole.log(`   📦 Tamanho: ${Math.round(buffer.length / 1024)} KB`);\n\n// =============================================================================\n// RETORNO FINAL\n// =============================================================================\n\nreturn [{\n    json: {\n        success: true,\n        fileName: fileName,\n        recordCount: linhasProcessadas,\n        totalAmount: parseFloat(resumo.valor_total_geral || 0).toFixed(2),\n        fileSize: buffer.length,\n        competencia: competencia,\n        timestamp: new Date().toISOString(),\n        stats: fileStats,\n        metadata: resultado.metadata\n    },\n    binary: {\n        data: buffer,\n        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        fileName: fileName,\n        fileExtension: 'xlsx'\n    }\n}];\n\n// =============================================================================\n// FIM DO CODE NODE\n// ============================================================================="
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3824,
        -880
      ],
      "id": "a5e047f1-0df1-4155-b21d-f1a21a72d914",
      "name": "Gerar XLSX",
      "alwaysOutputData": true,
      "executeOnce": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "name": "={{ $json.fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1PwylenfET8K8dQs-v-31ICPZyu16PFFm",
          "mode": "list",
          "cachedResultName": "Desafio 4 - Dados",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1PwylenfET8K8dQs-v-31ICPZyu16PFFm"
        },
        "options": {
          "propertiesUi": {
            "propertyValues": [
              {
                "key": "mimeType",
                "value": "'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        4112,
        -880
      ],
      "id": "3da63ab9-220f-4b2a-a29e-7a735429aba2",
      "name": "Upload file2",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "TYRe3LHdK36X23AI",
          "name": "Google Drive account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Compression1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression1": {
      "main": [
        [
          {
            "node": "Planilha Admissao",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Afastamentos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Aprendiz",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Ativos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Desligados",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Estagio",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Exterior",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Ferias",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Base dias uteis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Planilha Base valor sindicato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Afastamentos": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Insert Admissao": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Aprendiz": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Insert Ativos": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Insert Desligados": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Create a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Desligados": {
      "main": [
        [
          {
            "node": "Insert Desligados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Ativos": {
      "main": [
        [
          {
            "node": "Insert Ativos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Aprendiz": {
      "main": [
        [
          {
            "node": "Insert Aprendiz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Afastamentos": {
      "main": [
        [
          {
            "node": "Insert Afastamentos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Admissao": {
      "main": [
        [
          {
            "node": "Insert Admissao",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Estagio": {
      "main": [
        [
          {
            "node": "Insert Estagio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Exterior": {
      "main": [
        [
          {
            "node": "Insert Exterior",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Ferias": {
      "main": [
        [
          {
            "node": "Insert Ferias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Base dias uteis": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planilha Base valor sindicato": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Insert Dados Sindicato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Estagio": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Insert Exterior": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Insert Ferias": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "Insert Dados Sindicato": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 8
          }
        ]
      ]
    },
    "Create a row": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows1": {
      "main": [
        [
          {
            "node": "Split em Lotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Validar Resposta AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split em Lotes": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Resposta AI": {
      "main": [
        [
          {
            "node": "Merge Resultados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Resultados": {
      "main": [
        [
          {
            "node": "Gerar XLSX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gerar XLSX": {
      "main": [
        [
          {
            "node": "Upload file2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get many rows1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6c1da5df-6822-4a65-a142-d4f97a169304",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ca824af82caf965dc6a9fe77732aa0f32f8a767586044bd4bc9e23fe28a05a98"
  },
  "id": "CtUJpJJ5b5D93Yv0",
  "tags": []
}
